var ConfigManager = require('config.ConfigManager')
var Config = require('config.config')

class ArgHandler()

record ArgOption(flag,pat,descr,fun) endRec

var write = io.write
var pcall = pcall
var stdError = io.stderr
var exit = os.exit
var pairs = pairs
var concat = table.concat
var popen = io.popen
var getenv = os.getenv

var separators = {
	linux = "/",
	windows = "\\"
}

var newLines = {
	linux = "\n",
	windows = "\r\n"
}

--forward declare this var.
var argOptions <mutable> = ""

--code which attempts to grab host os type.
--found as a gist by soulik on github
function getOSType()
	local popen_status, popen_result = pcall(popen, "")
	if popen_status then
		popen_result:close()
		-- Unix-based OS
		ConfigManager:setOs(popen('uname -s','r'):read('*l'))
	else
		-- Windows
		ConfigManager:setOs(getenv('OS'))
	end
	if Config.os == nil then
		stdError:write("Error: could not determine host Operating system. Suggestion: pass in command line argument '",argOptions.os.option,"'\n")
	end
end

function getSep()
	--if couldnt find either then error out
	if separators[Config.os] then
		ConfigManager:setSep(separators[Config.os])
	else
		stdError:write("Error: could not find file separator for ",Config.os," Operating system. suggestion: pass in commandline argument '",argOptions.sep.option,"'\n")
		exit(64)
	end
end

function getNewLine()
	--if couldnt find either then error out
	if separators[Config.os] then
		ConfigManager:setNewLine(newLines[Config.os])
	else
		stdError:write("Error: could not find file separator for ",Config.os," Operating system. suggestion: pass in commandline argument '",argOptions.sep.option,"'\n")
		exit(64)
	end
end

global function ArgHandler.printHelp()
	write("Project Dysnomia. Adding method \r\n")
	for _,v in pairs(argOptions) do
		write("\t",v.flag,"\t",v.descr,"\r\n")
	end
end

function osType(_,checkSep,checkNl,args)
	var os =  args:match(argOptions.os.pat)
	ConfigManager:setOs(os)
	return nil,checkSep,checkNl
end

function printHelpAndExit()
	ArgHandler.printHelp()
	exit(75)
end

function parseOnly(checkOs,checkSep,checkNl)
	ConfigManager:setRun(false)
	ConfigManager:setTemp(false)
	return checkOs,checkSep,checkNl
end

function sepType(checkOs,_,checkNl,args)
	var sep = args:match(argOptions.sep.pat)
	ConfigManager:setSep(sep)
	return checkOs,nil,checkNl
end

function permFiles(checkOs,checkSep,checkNl)
	ConfigManager:setTemp(false)
	return checkOs,checkSep,checkNl
end

function tempFiles(checkOs,checkSep,checkNl)
	ConfigManager:setTemp(true)
	return checkOs,checkSep,checkNl
end

function newLineType(checkOs,checkSep,_,args)
	ConfigManager:setSep(args:match(argOptions.newLine.pat))
	return checkOs,checkSep,nil
end


function skipFiles(checkOs,checkSep,checkNl,args)
	var files = args:match(argOptions.skip.pat)
	for match in files:gmatch("[^,]+") do
		ConfigManager:addToSkipFiles(match)
	end
	return checkOs,checkSep,checkNl
end

argOptions = {
	parse = ArgOption("-parse","-parse;","only parse through files, do not run the program after parsing.",parseOnly),
	os = ArgOption("-os [os name]","-os;?%s*([^;]+);","enter the os type you are using, such as linux or windows.",osType),
	sep = ArgOption("-sep [separator]","-sep;?%s*([^;]+);","the file separator used by your OS for filepaths.",sepType),
	perm = ArgOption("-perm","-perm;","Do not remove generated files after running.",permFiles),
	temp = ArgOption("-temp","-temp;","remove all generated files after running.(default)",tempFiles),
	skip = ArgOption("-skip [files]","-skip;?s*(.+);","comma separated list of files to skip over",skipFiles),
	help = ArgOption("-help","-help;","print help screen.",printHelpAndExit),
	newLine = ArgOption("-nl [char(s)]","-nl:?s*(.+);","enter the newline character(s) which your OS uses.",newLineType)
}

global function ArgHandler.parseOptions(arg,preChecks)
	var args = concat(arg,";")
	var checkOs <mutable> = getOSType
	var checkSep <mutable> = getSep
	var checkNl <mutable> = getNewLine
	for _,v in pairs(argOptions) do
		if args:match(v.pat) then
			checkOs,checkSep,checkNl = v.func(checkOs,checkSep,checkNl,args)
		end
	end
	preChecks[#preChecks + 1] = checkOs
	preChecks[#preChecks + 1] = checkSep
	preChecks[#preChecks + 1] = checkNl
	return
end

endClass
