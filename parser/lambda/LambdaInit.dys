var TokenParser = require('parser.TokenParser')
var SingleStatementLambda = require('parser.lambda.SingleStatementLambda')
var MultiStatementLambda = require('parser.lambda.MultiStatementLambda')

class LambdaInit() :> TokenParser

method singleStatementLambda(returnMode,parserParams,bodyStartI)
	var singleStatement = SingleStatementLambda:new(returnMode)
	singleStatement:startParsing(parserParams,bodyStartI)
	return self
end

method multiStatementLambda(returnMode,parserParams,bodyStartI)
	var multiStatement = MultiStatementLambda:new(returnMode)
	multiStatement:startParsing(parserParams,bodyStartI)
	return self
end

method getBodyStartI(parserParams)
	return loopUntilMatch(parserParams,parserParams:getI() + 1,"%S",self.doNothing)
end

method startParsing(returnMode,parserParams)
	var bodyStartI = getBodyStartI(parserParams)
	if parserParams:getAt(bodyStartI) ~= "{" then return singleStatementLambda(returnMode,parserParams) end
	return multiStatementLambda(returnMode,parserParams,bodyStartI)
end

endClass
