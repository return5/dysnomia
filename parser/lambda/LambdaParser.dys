var TokenParser = require('parser.TokenParser')


class LambdaParser(returnMode) :> TokenParser

var concat = table.concat
var match = string.match

method balancedBrackets()
	return self.bracketCount == 0 and self.parensCount == 0 and self.bracesCount == 0
end

var countersMatches = {
	["("] = (parser) -> { parser.parensCount += 1},
	[")"] = (parser) -> { parser.parensCount -= 1},
	["["] = (parser) -> { parser.bracketCount += 1},
	["]"] = (parser) -> { parser.bracketCount -= 1},
	["{"] = (parser) -> { parser.bracesCount += 1},
	["}"] = (parser) -> {  parser.bracesCount -= 1}
}

method parseInput(parserParams)
	var char = parserParams:getCurrentToken()
	if (endingFunc(char) and self:balancedBrackets()) or not parserParams:isIWithinLen() then
		return finishLambda(parserParams)
	end
	if countersMatches[char] then
		countersMatches[char](self)
	end
	return TokenParser.parseInput(self,parserParams)
end

method setSingleParam(parameter)
	self.params = {parameter}
	return self
end

method addToParams()
	self.params = {}
	return function(param)
		self.params[#self.params + 1] = param
	end
end

method setMultiParams(parserParams,startI)
	loopBackUntilMatch(parserParams,startI,"%(",self:addToParams())
end

function eraseDysTextUntil(dysText,charMatchFunc)
	if match(dysText:getCurrent(),"%s") then
		dysText:loopBackUntil((char) -> match(char,"%S"),dysText.eraseEndingText)
	end
	dysText:loopBackUntil(charMatchFunc,dysText.eraseEndingText)
end

var singleParamMatchers = {
	[")"] = true,
	["("] = true,
	["]"] = true,
	["["] = true,
	["{"] = true,
	["}"] = true,
	["\t"] = true,
	[" "] = true,
	["\n"] = true,
	["\r"] = true,
	[";"] = true,
	[","] = true,
	["->"] = true,
	["and"] = true,
	["or"] = true,
	["="] = true
}

var multiParamMatchers = {
	['('] = true
}

method setParams(parserParams)
	var paramStartI = loopBackUntilMatch(parserParams,parserParams:getI() - 1,"%S",self.doNothing)
	var char = parserParams:getAt(paramStartI)
	if char ~= ")" then
		setSingleParam(char)
		eraseDysTextUntil(parserParams:getDysText(),(char) -> singleParamMatchers[char])
		return self
	end
	setMultiParams(parserParams,paramStartI - 1)
	eraseDysTextUntil(parserParams:getDysText(),(char) -> multiParamMatchers[char])
	parserParams:getDysText():eraseEndingText()
	return self
end

function iterateParams(params,lambda)
	for i=#params,1,-1 do
		lambda[#lambda + 1] = params[i]
	end
	lambda[#lambda + 1] = ") "
end

method generateFunction(parserParams)
	var funcStr = {"function("}
	iterateParams(self.params,funcStr)
	parserParams:getDysText():write(concat(funcStr))
	return self
end

method startParsing(parserParams)
	setParams(parserParams)
	generateFunction(parserParams)
	return self
end

constructor(returnMode)
	self.returnMode = returnMode
	self.parensCount = 0
	self.bracesCount = 0
	self.bracketCount = 0
end

return LambdaParser
