var TokenParser = require('dysnomiaParser.TokenParser')


class ClassAndRecordParser(returnMode,startI) :> TokenParser

var match = string.match
var concat = table.concat
var remove = table.remove

ClassAndRecordParser.tokenFuncs = {}
for token,func in pairs(TokenParser.tokenFuncs) do
	ClassAndRecordParser.tokenFuncs[token] = func
end


method writeSelfInFrontOfMethodCall(i,dysText,regex,pattern)
	var prevI = loopBackUntilMatch(dysText,i - 1,"%S",self.doNothing)
	var text = dysText:getAt(prevI)
	if text ~= "." and text ~= ":" and not match(text,regex) and not match(text,pattern) then
		dysText:replaceTextAt(pattern .. dysText:getAt(i),i)
	end
	return self
end

method secondPass(parserParams,name)
	var regex = name .. "[:%.]"
	var dysText = parserParams:getDysText()
	for i=self.startI,dysText:getLength(),1 do
	    var text = dysText:getAt(i)
		if self.class.methods[text] then
			writeSelfInFrontOfMethodCall(i,dysText,regex,"self:")
		elseif self.class.staticMethods[text] then
	        writeSelfInFrontOfMethodCall(i,dysText,regex,"self.")
		end
	end
	return self
end

method writeAssignmentOfParams(dysText,param)
	dysText:writeFourArgs(param," = ",param,",")
end

method writeParamAndCommaToDysText(dysText,param)
	dysText:writeTwoArgs(param,",")
end

method writeParamsToDysText(dysText,params,loopFunc,endingFunc)
	if #params > 0 then
		for i=1,#params - 1,1 do
			loopFunc(dysText,params[i])
		end
	end
	endingFunc(dysText,params[#params])
	return self
end

local function clearWord(word)
	for i=1,#word,1 do
		remove(word)
	end
end

method returnFunctionAddingTextToParams(params)
	return (text,word) -> {
		if text and #text > 0 and text ~= "," then
			word[#word + 1] = text
		elseif text and #text > 0 and text == "," then
			params[#params + 1] = concat(word)
			clearWord(word)
		end
	}
end


method parseInstanceOrStaticMethod(parserParams,methodsTable,del)
	var newI = loopUntilMatch(parserParams,parserParams:getI() + 1,"%S",self.doNothing)
	methodsTable[parserParams:getAt(newI)] = true
	parserParams:getDysText():writeFourArgs("function ",self.classOrRecordName,del,parserParams:getAt(newI))
	parserParams:updateSetI(self,newI + 1)
	return self
end

method parseMethod(parserParams)
    parseInstanceOrStaticMethod(parserParams,self.class.methods,":")
    return self
end

ClassAndRecordParser.tokenFuncs['method'] = ClassAndRecordParser.parseMethod

constructor(returnMode,startI)
    super()
    self.returnMode = returnMode
    self.startI = startI
    self.params = {}
end

endClass
