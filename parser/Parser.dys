var FileWriter = require('fileOperations.FileWriter')
var FileAttr = require('fileOperations.FileAttr')
var ParserParameters = require('parser.ParserParameters')
var TokenParser = require('parser.TokenParser')
var DysText = require('parser.DysText')
var RequireParser = require('parser.RequireParser')
var RequireOnlyParser = require('parser.RequireOnlyParser')


require('parser.ParserDriver')


class Parser(text,filePath)

method parseFile(tokenParser)
	var parserParameters = ParserParameters:new(tokenParser,1,self.text,DysText:new())
	var index <mutable> = 1
	while index <= #self.text do
		parserParameters.currentMode:parseInput(parserParameters)
		index = parserParameters:getI()
	end
	var fileWriter = FileWriter:new(FileAttr(self.filePath,parserParameters:getDysText():getDysText()))
	fileWriter:writeFile()
	return self
end

method beginParsing()
	return parseFile(TokenParser)
end

method parseLuaFile()
	return parseFile(RequireOnlyParser)
end

constructor(text,filePath)
    self.filePath = filePath
    self.text = text
    self.methods = {}
    inClass = false
end

function postConstruct()
	RequireParser.Parser = Parser
end

postConstruct()

endClass
